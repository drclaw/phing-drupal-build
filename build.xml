<?xml version="1.0" encoding="UTF-8"?>
<!-- **Phing Drupal Template** is a XML build file for the
**[Phing build system](http://www.phing.info/trac/)** with targets and
configuration designed for **[Drupal](http://drupal.org)** projects.

The aim of the project is to provide a build file which can be used with a
contiuous integration server to ensure clean code - check for compilation
errors, run unit tests, lint code and verify that code standards are upheld.

The template has been developed with the
[Jenkins job template for Drupal projects](http://reload.github.com/jenkins-drupal-template)
and the [Drupal Jenkins demo](http://github.com/kasperg/drupal-jenkins-demo).
It may work with other continuous integration systems.

### Usage

The template can be used in several ways:

* As a starting point for your own build files. Download
[`build.xml`](https://raw.github.com/reload/phing-drupal-template/master/build.xml)
to the root directory of your Drupal project and modify it as needed.

* As the actual build file for your project. You can configure most aspects of
the build according to your project through a properties file. This works
whether you have your entire Drupal project in VCS or use
[drush_make](http://drupal.org/project/drush_make). Download the entire
project and place it in a subfolder or use it as a
[git submodule](http://kernel.org/pub/software/scm/git/docs/git-submodule.html).
Using the `build` subfolder from the root directory is recommended. Copy the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project. Leave out
properties where you want to use the default values.

### Requirements

Using the template requires a range of PEAR packages present. They can be
installed as follows:

    pear channel-discover pear.phing.info
    pear channel-discover pear.pdepend.org
    pear channel-discover pear.phpmd.org
    pear channel-discover pear.phpunit.de
    pear channel-discover components.ez.no
    pear channel-discover pear.symfony-project.com

    pear install phing/phing
    pear install  -a phpmd/PHP_PMD
    pear install phpunit/phpcpd
    pear install phpunit/phploc
    pear install PHPDocumentor
    pear install PHP_CodeSniffer
    pear install HTTP_Request2
    pear install -a phpunit/PHP_CodeBrowser

The following must be available from the command line:

* [Drush](http://drupal.org/project/drush): The Drupal shell.
[Installation instructions](http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt).
* PHP 5.2.7 or newer with sqlite extension
* Java Runtime Environment

### Credits

The build file is heavily inspired by Sebastian Bergmans wonderful [template
for Jenkins Jobs for PHP Projects](http://jenkins-php.org/) and began as a
Phing port of his suggested Apache Ant build file.

Many of the same tools are used: [phploc](http://sebastianbergmann.github.com/phploc/),
[phpcpd](https://github.com/sebastianbergmann/phpcpd),
[PHPMD](http://phpmd.org/), [phpDocumentor](http://www.phpdoc.org/) and [PHP_CodeBrowser](https://github.com/Mayflower/PHP_CodeBrowser).

A couple of additional external tools are downloaded and used during the
build process:

* [Phing Drush Task](http://drupal.org/project/phingdrushtask):
  A custom task for running drush from Phing
* [Phing PHPLoc](https://github.com/raphaelstolt/phploc-phing): A custom task
  for running phploc from Phing
* [jslint4java](http://jslint4java.googlecode.com/): Supports execution of
  jslint from the command line
* [jslintÂ´](https://github.com/mikewest/JSLint): A more humane version of
  Douglas Crockfords JSLint.
* [csslint](http://csslint.net): A tool to help point out problems with CSS code.
* [Mozilla Rhino](http://www.mozilla.org/rhino/download.html): An implementation of Javascript in Java.
* [Coder](http://drupal.org/project/coder): Drupal module for
  performing code reviews.

This documentation has been generated by
[phrocco](https://github.com/oneblackbear/phrocco)
- a PHP port of the literate documentation generator Docco.

### Contributors

The Phing Drupal template is developed by [Reload!](http://reload.dk) - a Drupal development agency located in Copenhagen, Denmark.

Drush Make and Simpletest support has been sponsored by [DBC](http://www.dbc.dk/).

<a href="http://github.com/reload/phing-drupal-template">
  <img style="position: absolute; top: 0; right: 0; border: 0;" src="https://a248.e.akamai.net/assets.github.com/img/30f550e0d38ceb6ef5b81500c64d970b7fb0f028/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" alt="Fork me on GitHub">
</a>
-->

<project name="phing-drupal-build" default="build">

  <!-- ## Main targets
    These are the main targets that will build the project.
    Include this file in your build.xml file for an easy build or, copy
    and paste the code and customize as needed.
  -->

  <!-- ### Build project

  Do a complete build of the project by verifying code consistency and and
  performing static analysis of the code.

  This is the default build target.

  Do not run `docs` for now. Generating documentation eats up memory and build
  time and is largely obsolete when using GitHub. -->
  <target name="build" depends="compile-components,
                                init,
                                clean,
                                verify,
                                analyze" />

  <!-- ### Verify code consistency

  Make sure that our code is clean and functional. -->
  <target name="verify" depends="compile-components,
                                 init,
                                 clean,
                                 lint-php-custom,
                                 lint-js-custom,
                                 lint-css-custom,
                                 check-php-debug,
                                 check-js-debug,
                                 simpletest"/>

  <!-- ### Analyze code

  Perform static analysis of the code to generate statistics, identify potential
  problems and opportunities for refactorings and make sure that the code
  complies with coding standards. -->
  <target name="analyze" depends="compile-components,
                                  init,
                                  clean,
                                  phploc,
                                  phpmd,
                                  phpcpd">
    <!-- Moved inside target to support properties in target name -->
    <phingcall target="coder-review-d${drupal.version}">
      <!-- Run the target as if it was executed from the Drupal root
           directory. -->
      <property name="project.basedir" value="${project.drupal.dir}"/>
      <!-- We already have a clean environment so avoid further cleaning. -->
      <property name="project.cleaned" value="1"/>
      <!-- Make will run again as a part of the `init` target. We already have
           a working site so skip that. -->
      <property name="project.make.skip" value="1"/>
    </phingcall>
  </target>

  <!-- ### Generate documentation

  Generate HTML documentation and code browser for the project. -->
  <target name="docs" depends="compile-components,
                               init,
                               clean,
                               phpdoc,
                               phpcb" />

  <!-- ### Include all components -->
  <target name="compile-components">

    <!-- Prepare some variables -->
    <patternset id="compile.components">
      <include name="${phing.dir.phing-drupal-build}/build.components/*.xml" />
    </patternset>
    <property name="compiled.components.dir"
              value="${phing.dir.phing-drupal-build}/build.components/cache"/>
    <property name="compiled.components.file"
              value="${compiled.components.dir}/build.compiled.xml"/>
    <delete dir="${compiled.components.dir}"/>
    <mkdir dir="${compiled.components.dir}" mode="755" />
    <property name="compiled.components.file"
              value="${phing.dir.phing-drupal-build}/build.components/cache/build.compiled.xml"/>

    <foreach target="compile-component" param="filename" absparam="absfilename">
      <fileset refid="build.components"/>
    </foreach>

    <import file="${compiled.components.file}" />
  </target>

  <target name="compile-component">
    <loadfile property="component" file="${absfilename}" />
    <append text="${component}"  destFile="${compiled.components.file}" />
  </target>

</project>
