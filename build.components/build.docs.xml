<?xml version="1.0" encoding="UTF-8"?>

<!-- ### Generate documentation -->

<!-- #### Generate API Documentation

Uses [phpDocumentor](http://www.phpdoc.org/) to generate documentation. -->
<target name="phpdoc"
        description="Generate API documentation using phpDocumentor">
  <mkdir dir="${project.buildir}/api"/>
  <phpdoc title="API Documentation"
          destdir="${project.builddir}/api"
          sourcecode="php"
          output="HTML:Smarty:PHP">
    <fileset refid="src.php" />
  </phpdoc>
</target>

<!-- #### Generate a code browser

Generate a code browser for PHP files with syntax highlighting and
colored error-sections using
[PHP_CodeBrowser](https://github.com/Mayflower/PHP_CodeBrowser). -->
<target name="phpcb"
        description="Aggregate tool output with PHP_CodeBrowser"
        depends="init">
  <mkdir dir="${project.builddir}/code-browser"/>
  <!-- There is no Phing target for PHP CodeBrowser so do a plain
       execute. -->
  <exec command="phpcb  --log ${project.logdir}
                        --source ${project.basedir}
                        --output ${project.builddir}/code-browser"
        logoutput="true" />
</target>

<!-- ### Build documentation using Phrocco

Generate documentation for the build script using [Phrocco](https://github.com/oneblackbear/phrocco) and prepare for pushing changes to [GitHub pages](http://pages.github.com/).

To use this task you mush have a version of Phrocco with support for XML
parsing installed. The task is primarily for template developers. -->
 <target name="phrocco"
         depends="clean">
   <!-- Determine current branch -->
   <exec command="git status --branch --short"
         outputProperty="phrocco.code.status" />
   <php expression="array_shift(explode('...', trim('${phrocco.code.status}', '# '), 2))"
        returnProperty="phrocco.code.branch"/>

   <!-- Generate documentation in the root build directory -->
   <exec command="phrocco -i . -o . -l xml"
         passthru="true" checkreturn="true" />
   <!-- Checkout the GitHub pages branch -->
   <exec command="git checkout gh-pages"
         passthru="true" checkreturn="true"/>
   <!-- We use the documentation for build.xml and root file so rename
        it to index.html -->
   <move file="build.html" tofile="index.html" overwrite="true"
         haltonerror="true" />

   <property name="phrocco.commit.mode" value=""/>
   <!-- If the local documentation branch is ahead then we have other
        changes which have not been pushed yet. These have probably also
        been generated by this script so amend these changes. -->
   <exec command="git status --branch --short"
         outputProperty="phrocco.docs.status" />
   <if>
     <contains string="${phrocco.docs.status}" substring="[ahead"/>
     <then>
       <property name="phrocco.commit.mode" value="--amend"
                 override="true" />
     </then>
   </if>

   <!-- Commit the changes -->
   <exec command="git commit --all -m 'Documentation update' ${phrocco.commit.mode}"
         passthru="true" checkreturn="true"/>

   <!-- Return to the main branch -->
   <exec command="git checkout ${phrocco.code.branch}"
         passthru="true" checkreturn="true"/>
 </target>
